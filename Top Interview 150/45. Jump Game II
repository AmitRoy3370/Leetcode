class Solution {

  private int solve(int i, int n, int a[], int dp[]) {

    if (i >= n) {

      return Integer.MAX_VALUE;

    }

    if (i == n - 1) {

      return 1;

    }

    if (dp[i] != Integer.MAX_VALUE) {

      return dp[i];

    }

    for (int j = 1; j < a[i] && j < n; ++j) {

      dp[j] = dp[i] + Math.min(dp[j], solve(i + j, n, a, dp));

    }

    return dp[i];

  }

  public int jump(int[] a) {

    int n = a.length;

    if (n == 1) {

      return 0;

    }

    int steps = 0;

    int presentDistance = 0;
    int maxEnd = 0;

    for (int i = 0; i != n - 1; ++i) {

      presentDistance = Math.max(presentDistance, i + a[i]);

      if (i == maxEnd) {

        ++steps;
        maxEnd = presentDistance;

      }

    }

    return steps;

  }

}
