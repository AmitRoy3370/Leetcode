class Solution {
    public int longestSubsequence(int[] a, int difference) {

        int n = a.length;

        Map<Integer, Integer> map = new HashMap<>();

        int maxLen = 0;

        for (int i = 0; i < n; ++i) {

            int nextElement = a[i] - difference;

            if (!map.containsKey(nextElement)) {

                map.put(a[i], 1);

                maxLen = Math.max(maxLen, 1);

            } else {

                int temp = 1 + map.get(nextElement);

                maxLen = Math.max(temp, maxLen);

                map.put(a[i], temp);

            }

        }

        /*
         * for(int i = 19; i >= 1; i -= 2) {
         * 
         * System.out.println(i + " " + map.getOrDefault(i, 0));
         * 
         * }
         */

        return maxLen;

    }
}
