class Solution {

    private static int solve(int a[]) {

        int sell = 0, hold = Integer.MIN_VALUE, previous = 0;

        for (int price : a) {

            int catche = sell;
            sell = Math.max(sell, hold + price);
            hold = Math.max(hold, previous - price);
            previous = catche;

        }

        return sell;

    }

    private int solve(int i, int dp[][], int a[], int operation) {

        if (i >= a.length) {

            return 0;

        }

        if (dp[operation][i] != -1) {

            return dp[operation][i];

        }

        int maxIncome = Integer.MIN_VALUE;

        if (operation == 0) { // buy or leave

            maxIncome = Math.max(maxIncome, solve(i + 1, dp, a, 1) - a[i]);
            maxIncome = Math.max(maxIncome, solve(i + 1, dp, a, 0));

        } else if (operation == 1) { // sell or leave.

            maxIncome = Math.max(maxIncome, solve(i + 1, dp, a, 2) + a[i]);
            maxIncome = Math.max(maxIncome, solve(i + 1, dp, a, 1));

        } else if (operation == 2) { // cool down.

            return dp[operation][i] = solve(i + 1, dp, a, 0);

        }

        return dp[operation][i] = maxIncome;

    }

    public int maxProfit(int[] a) {

        return solve(a);

        /*
         * int n = a.length;
         * 
         * int dp[][] = new int[3][n + 1];
         * 
         * for (int i = 0; i != 3; ++i) {
         * 
         * for (int j = 0; j != n + 1; ++j) {
         * 
         * dp[i][j] = -1;
         * 
         * }
         * 
         * }
         * 
         * return solve(0, dp, a, 0);
         */

    }

}
